{"version":3,"file":"static/js/857.9ec4cc3a.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","import { createClient } from \"@supabase/supabase-js\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport const addQuote = async (quoteData) => {\n  const response = await supabase\n    .from(\"quotes\")\n    .insert({ author: quoteData.author, text: quoteData.text });\n\n  const data = await response.json();\n  console.log(data);\n  if (!response.ok) {\n    throw new Error(data.message || \"could not create quote.\");\n  }\n  return null;\n};\n\nexport async function getAllQuotes() {\n  const response = await fetch(supabase.from(\"quotes\").select(\"*\"));\n  const { data } = await supabase.from(\"quotes\").select(\"*\");\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n  console.log(transformedQuotes);\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(\n    supabase.from(\"quotes\").select().eq(\"id\", quoteId)\n  );\n  const { data } = await supabase\n    .from(\"quotes\")\n    .select(\"id, author, text\")\n    .eq(\"id\", quoteId)\n    .single();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addComment(requestData) {\n  // call comments and preserve into a new const and then push const in to comments []\n\n  // const newComment = { comment: requestData.text, id: requestData.commentId };\n  // const comments = [];\n  // comments.push(newComment);\n\n  const response = await supabase.from(\"quoteComments\").insert({\n    text: requestData.commentData.text,\n    quoteId: requestData.quoteId,\n  });\n\n  // const response = await supabase\n  //   .from(\"quotes\")\n  //   .update({ comments: comments })\n  //   .eq(\"id\", requestData.quoteId)\n  //   .single();\n\n  console.log(response);\n  if (!response.status === 201) {\n    throw new Error(response.message || \"could not add comment.\");\n  }\n\n  return { commentId: response.name };\n}\n\nexport async function getAllComments(quoteId) {\n  console.log(quoteId);\n\n  const response = await fetch(\n    supabase.from(\"quoteComments\").select(\"id, text\").eq(\"quoteId\", quoteId)\n  );\n\n  const { data } = await supabase\n    .from(\"quoteComments\")\n    .select(\"id, text\")\n    .eq(\"quoteId\", quoteId);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  console.log(data);\n\n  const transformedComments = [];\n  // sort this\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    console.log(commentObj);\n\n    transformedComments.push(commentObj);\n  }\n  console.log(transformedComments);\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useRef, useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    //   sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n    // };\n\n    // sendRequest({\n    //   text: enteredText,\n    //   commentId: Math.floor(Math.random() * 1000) + 1,\n    //   quoteId: props.quoteId,\n    // });\n\n    sendRequest({\n      commentData: {\n        text: enteredText,\n      },\n      // commentId: Math.floor(Math.random() * 1000) + 1,\n      quoteId: props.quoteId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          // quoteId={params.quoteId}\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/ui/LoadingSpinner\";\n// const DUMMY_QUOTES = [\n//   { id: \"q1\", author: \"Max\", text: \"Learning React is Fun!\" },\n//   { id: \"q2\", author: \"Maxie\", text: \"Learning React is Great!\" },\n// ];\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  // const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    <p className=\"centered\">{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    console.log(quoteId);\n    console.log(loadedQuote.text);\n    console.log({ loadedQuote });\n    return <p>No Quote Found!</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","supabase","createClient","process","addQuote","quoteData","from","insert","author","text","response","json","console","log","ok","Error","getAllQuotes","fetch","select","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","eq","single","loadedQuote","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","className","classes","comments","map","comment","commentTextRef","useRef","useHttp","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","onSubmit","LoadingSpinner","htmlFor","rows","ref","useState","isAddingComment","setIsAddingComment","useParams","loadedComments","addedCommentHandler","length","onClick","match","useRouteMatch","Fragment","path","exact","to","url"],"sourceRoot":""}