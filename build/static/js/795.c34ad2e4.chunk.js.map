{"version":3,"file":"static/js/795.c34ad2e4.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/ui/Card.module.css?49cd","components/ui/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","import { createClient } from \"@supabase/supabase-js\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport const addQuote = async (quoteData) => {\n  const response = await supabase\n    .from(\"quotes\")\n    .insert({ author: quoteData.author, text: quoteData.text });\n\n  const data = await response.json();\n  console.log(data);\n  if (!response.ok) {\n    throw new Error(data.message || \"could not create quote.\");\n  }\n  return null;\n};\n\nexport async function getAllQuotes() {\n  const response = await fetch(supabase.from(\"quotes\").select(\"*\"));\n  const { data } = await supabase.from(\"quotes\").select(\"*\");\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n  console.log(transformedQuotes);\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(\n    supabase.from(\"quotes\").select().eq(\"id\", quoteId)\n  );\n  const { data } = await supabase\n    .from(\"quotes\")\n    .select(\"id, author, text\")\n    .eq(\"id\", quoteId)\n    .single();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addComment(requestData) {\n  // call comments and preserve into a new const and then push const in to comments []\n\n  // const newComment = { comment: requestData.text, id: requestData.commentId };\n  // const comments = [];\n  // comments.push(newComment);\n\n  const response = await supabase.from(\"quoteComments\").insert({\n    text: requestData.commentData.text,\n    quoteId: requestData.quoteId,\n  });\n\n  // const response = await supabase\n  //   .from(\"quotes\")\n  //   .update({ comments: comments })\n  //   .eq(\"id\", requestData.quoteId)\n  //   .single();\n\n  console.log(response);\n  if (!response.status === 201) {\n    throw new Error(response.message || \"could not add comment.\");\n  }\n\n  return { commentId: response.name };\n}\n\nexport async function getAllComments(quoteId) {\n  console.log(quoteId);\n\n  const response = await fetch(\n    supabase.from(\"quoteComments\").select(\"id, text\").eq(\"quoteId\", quoteId)\n  );\n\n  const { data } = await supabase\n    .from(\"quoteComments\")\n    .select(\"id, text\")\n    .eq(\"quoteId\", quoteId);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  console.log(data);\n\n  const transformedComments = [];\n  // sort this\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    console.log(commentObj);\n\n    transformedComments.push(commentObj);\n  }\n  console.log(transformedComments);\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__48SLx\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__ogBoi\",\"loading\":\"QuoteForm_loading__gyIuQ\",\"control\":\"QuoteForm_control__8SqBM\",\"actions\":\"QuoteForm_actions__I8AC6\"};","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport Card from \"../ui/Card\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  const formFocusHandler = () => {\n    setIsEntering(true);\n  };\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={() => \"Leave page and cancel form? \"}\n      />\n      <Card>\n        <form\n          onFocus={formFocusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      history.push(\"/quotes\");\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n    console.log(quoteData);\n    // history.push(\"/quotes\");\n  };\n  return (\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />\n  );\n};\n\nexport default NewQuote;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","supabase","createClient","process","addQuote","quoteData","from","insert","author","text","response","json","console","log","ok","Error","getAllQuotes","fetch","select","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","eq","single","loadedQuote","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","className","classes","children","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","when","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","useHttp","history","useHistory","useEffect"],"sourceRoot":""}