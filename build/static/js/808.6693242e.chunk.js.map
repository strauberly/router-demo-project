{"version":3,"file":"static/js/808.6693242e.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      data: null,\n      error: null,\n      status: \"pending\",\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      data: action.responseData,\n      error: null,\n      status: \"completed\",\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: \"completed\",\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? \"pending\" : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: \"SEND\" });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: \"SUCCESS\", responseData });\n      } catch (error) {\n        dispatch({\n          type: \"ERROR\",\n          errorMessage: error.message || \"Something went wrong!\",\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","import { createClient } from \"@supabase/supabase-js\";\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport const addQuote = async (quoteData) => {\n  const response = await supabase\n    .from(\"quotes\")\n    .insert({ author: quoteData.author, text: quoteData.text });\n\n  const data = await response.json();\n  console.log(data);\n  if (!response.ok) {\n    throw new Error(data.message || \"could not create quote.\");\n  }\n  return null;\n};\n\nexport async function getAllQuotes() {\n  const response = await fetch(supabase.from(\"quotes\").select(\"*\"));\n  const { data } = await supabase.from(\"quotes\").select(\"*\");\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n  console.log(transformedQuotes);\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(\n    supabase.from(\"quotes\").select().eq(\"id\", quoteId)\n  );\n  const { data } = await supabase\n    .from(\"quotes\")\n    .select(\"id, author, text\")\n    .eq(\"id\", quoteId)\n    .single();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addComment(requestData) {\n  // call comments and preserve into a new const and then push const in to comments []\n\n  // const newComment = { comment: requestData.text, id: requestData.commentId };\n  // const comments = [];\n  // comments.push(newComment);\n\n  const response = await supabase.from(\"quoteComments\").insert({\n    text: requestData.commentData.text,\n    quoteId: requestData.quoteId,\n  });\n\n  // const response = await supabase\n  //   .from(\"quotes\")\n  //   .update({ comments: comments })\n  //   .eq(\"id\", requestData.quoteId)\n  //   .single();\n\n  console.log(response);\n  if (!response.status === 201) {\n    throw new Error(response.message || \"could not add comment.\");\n  }\n\n  return { commentId: response.name };\n}\n\nexport async function getAllComments(quoteId) {\n  console.log(quoteId);\n\n  const response = await fetch(\n    supabase.from(\"quoteComments\").select(\"id, text\").eq(\"quoteId\", quoteId)\n  );\n\n  const { data } = await supabase\n    .from(\"quoteComments\")\n    .select(\"id, text\")\n    .eq(\"quoteId\", quoteId);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  console.log(data);\n\n  const transformedComments = [];\n  // sort this\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    console.log(commentObj);\n\n    transformedComments.push(commentObj);\n  }\n  console.log(transformedComments);\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__Q6KwW\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__MLz6k\",\"sorting\":\"QuoteList_sorting__GDrEn\"};","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__EUQsM\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport LoadingSpinner from \"../components/ui/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\n// const DUMMY_QUOTES = [\n//   { id: \"q1\", author: \"Max\", text: \"Learning React is Fun!\" },\n//   { id: \"q2\", author: \"Maxie\", text: \"Learning React is Great!\" },\n// ];\n\nconst AllQuotes = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"'centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n  return <QuoteList quotes={loadedQuotes} />;\n};\n\nexport default AllQuotes;\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","supabase","createClient","process","addQuote","quoteData","from","insert","author","text","response","json","console","log","ok","Error","getAllQuotes","fetch","select","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","eq","single","loadedQuote","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","className","classes","to","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","pathname","map","quote","useHttp","loadedQuotes","useEffect","LoadingSpinner","length"],"sourceRoot":""}